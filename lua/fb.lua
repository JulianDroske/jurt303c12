

-- ! misc functions --


-- from JuRl project
function str2table(str)
	local t={}
	str:gsub('.', function(c) table.insert(t,c) end)
	return t
end



-- ! graphic functions --

-- from JuRt project
function xy2l(x,y,start)
	if start==nil then start=1 end
	x=x-1 y=y-1
	return x+y*width+start
end

-- from JuRt project
function l2xy(l, start)
	if start==nil then start=1 end
	l = l-start
	return (l+1)%width, math.floor((l/width)+1)
end


-- ! RGB functions --


-- 0~31, 0~63, 0~31
function rgb565(r, g, b)
	local v1 = '' local v2 = ''
	local nb=0	-- 0~15
	repeat
		if nb < 5 then
			v1 = v1..string.char(r%2+48)
			r = math.floor(r/2)
		elseif nb < 11 then
			if nb < 8 then
				v1 = v1..string.char(g%2+48)
				g = math.floor(g/2)
			else
				v2 = v2..string.char(g%2+48)
				g = math.floor(g/2)
			end
		else
			v2 = v2..string.char(b%2+48)
			b = math.floor(b/2)
		end
		nb=nb+1
	until(nb==16)
	return string.char(tonumber(v1, 2), tonumber(v2, 2))
end

-- 0~31, 0~31, 0~31
function rgb555(r, g, b)
	local v1 = '' local v2 = ''
	local nb=1	-- 0~15
	repeat
		if nb < 6 then
			v1 = v1..string.char(r%2+48)
			r = math.floor(r/2)
		elseif nb < 11 then
			if nb < 8 then
				v1 = v1..string.char(g%2+48)
				g = math.floor(g/2)
			else
				v2 = v2..string.char(g%2+48)
				g = math.floor(g/2)
			end
		else
			v2 = v2..string.char(b%2+48)
			b = math.floor(b/2)
		end
		nb=nb+1
	until(nb==16)
	return string.char(tonumber(v1, 2), tonumber(v2, 2))
end



-- ! fonts --

FONT={
	0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	-- 0~31
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	-- space
	{ 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},
	{ 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	{ 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},
	{ 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},
	{ 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},
	{ 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},
	{ 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},
	{ 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},
	{ 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},
	{ 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},
	{ 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},
	{ 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},
	{ 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},
	{ 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},
	{ 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},
	{ 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},
	{ 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},
	{ 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00},
	{ 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},
	{ 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},
	{ 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},
	{ 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},
	{ 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},
	{ 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},
	{ 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},
	{ 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},
	{ 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},
	{ 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},
	{ 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},
	{ 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},
	{ 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},
	{ 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00},
	{ 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},
	{ 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00},
	{ 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},
	{ 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},
	{ 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},
	{ 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},
	{ 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},
	{ 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},
	{ 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00},
	{ 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},
	{ 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},
	{ 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},
	{ 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},
	{ 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00},
	{ 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},
	{ 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00},
	{ 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},
	{ 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},
	{ 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},
	{ 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},
	{ 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},
	{ 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},
	{ 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},
	{ 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00},
	{ 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},
	{ 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},
	{ 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},
	{ 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},
	{ 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},
	{ 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00},
	{ 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00},
	{ 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00},
	{ 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00},
	{ 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00},
	{ 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00},
	{ 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F},
	{ 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00},
	{ 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},
	{ 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E},
	{ 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00},
	{ 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},
	{ 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00},
	{ 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00},
	{ 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00},
	{ 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F},
	{ 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78},
	{ 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00},
	{ 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00},
	{ 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00},
	{ 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00},
	{ 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},
	{ 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00},
	{ 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00},
	{ 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F},
	{ 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00},
	{ 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},
	{ 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},
	{ 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},
	{ 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
}
FNTblack=rgb565(0,0,0)
FNTwhite=rgb565(31,63,31)
FNTspace={}
FNTblack=FNTblack..FNTblack
FNTwhite=FNTwhite..FNTwhite
for i=1,8,1 do FNTspace[i]={} end


-- ! functions for fonts --
function char2matrix(c)
	local matrix = {}
	local mat = FONT[string.byte(c)];
	if mat == 0 or mat == nil then
		return FNTspace
	end
	if type(mat) == 'number' then return mat end

	for i=1,8,1 do
		matrix[i]={}
		local ch = mat[i]
		local j = 1
		repeat
			if ch % 2 == 1 then
				matrix[i][j] = true
			end
			j=j+1
			ch = math.floor(ch/2)
		until(ch==0)
	end
	return matrix
end

function str2dat(str)
	local fnmart={}
	local w=0 local h=0
	str = str2table(str)
	for i=0,#str-1 do
		local ch = str[i+1]
		local matrix = char2matrix(ch)
		-- first process ENTER
		if matrix == -1 then w=0 h=h+1
		else
			-- i is also the offset*8 for every char
			for j=1,8 do	-- per row
				for k=1,8 do	-- per pixel (col)
					-- if matrix[j][k] then fnmart[xy2l(i*w+k, 8*h+j)] = true end
					fnmart[xy2l(8*w+k, 8*h+j)] = matrix[j][k]
				end
			end
			w=w+1
		end
		if w == cols then w=0 h=h+1 end
	end
	-- return fnmart
	-- debug start --
		-- for k,v in pairs(fnmart) do print('At: ', l2xy(k)) end
	local fnstr=''
	for i=1,(h+1)*8 do for j=1,width do
		if ( j<=rWidth ) and fnmart[xy2l(j,i)] then fnstr=fnstr..FNTwhite else fnstr=fnstr..FNTblack end
	end end
		-- print('dat length='..#fnstr)
	-- debug end --
	return fnstr
end


-- ! main --

if arg[1] == nil or arg[2] == nil or arg[3] == nil then
	print("Invalid arguments.\nUsage: "..arg[0].." <width> <height> <text>")
	os.exit(0)
end

width = arg[1]
height = arg[2]
str = string.gsub(arg[3], '\\n', '\n')

cols = math.floor(width/8)
rows = math.floor(height/8)
rWidth = cols*8
rHeight = rows*8


-- body --

dat=str2dat(str)
io.stdout:write(dat)
